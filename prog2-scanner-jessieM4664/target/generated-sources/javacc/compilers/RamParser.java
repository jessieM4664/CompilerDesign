/* RamParser.java */
/* Generated By:JavaCC: Do not edit this line. RamParser.java */
    package compilers;
    import java.io.FileNotFoundException;

    public class RamParser implements RamParserConstants {
        public static void main(String[] args)
        throws ParseException, TokenMgrError, FileNotFoundException
        {
            if (args.length == 0) {
                RamParser parser = new RamParser( System.in ) ;
                parser.Goal();
            } else {
                java.io.InputStream is = new java.io.FileInputStream(new java.io.File(args[0]));
                RamParser parser = new RamParser( is ) ;
                parser.Goal();
            }
        }

// The following is a simple grammar that will allow you
// to test the generated lexer.
  final public void Goal() throws ParseException {
    label_1:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case CLS:
      case EXT:
      case PUB:
      case STAT:
      case VOID:
      case MAIN:
      case STRINGTYPE:
      case SYSOUT:
      case LENGTH:
      case IF:
      case ELSE:
      case WHILE:
      case RETURN:
      case INTTYPE:
      case BOOLEAN:
      case FALSE:
      case TRUE:
      case THIS:
      case NEW:
      case LBRACE:
      case RBRACE:
      case LCBRACE:
      case RCBRACE:
      case LBRACKET:
      case RBRACKET:
      case COMMA:
      case DOT:
      case PLUS:
      case MINUS:
      case MULT:
      case LESSTHAN:
      case AND:
      case BANG:
      case SEMI:
      case EQUAL:{
        ;
        break;
        }
      default:
        jj_la1[0] = jj_gen;
        break label_1;
      }
      RamToken();
System.out.println("<" + token.kind + " , " + token.image + ">");
    }
}

  final public void RamToken() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case CLS:{
      jj_consume_token(CLS);
      break;
      }
    case EXT:{
      jj_consume_token(EXT);
      break;
      }
    case PUB:{
      jj_consume_token(PUB);
      break;
      }
    case STAT:{
      jj_consume_token(STAT);
      break;
      }
    case VOID:{
      jj_consume_token(VOID);
      break;
      }
    case MAIN:{
      jj_consume_token(MAIN);
      break;
      }
    case STRINGTYPE:{
      jj_consume_token(STRINGTYPE);
      break;
      }
    case SYSOUT:{
      jj_consume_token(SYSOUT);
      break;
      }
    case LENGTH:{
      jj_consume_token(LENGTH);
      break;
      }
    case IF:{
      jj_consume_token(IF);
      break;
      }
    case ELSE:{
      jj_consume_token(ELSE);
      break;
      }
    case WHILE:{
      jj_consume_token(WHILE);
      break;
      }
    case RETURN:{
      jj_consume_token(RETURN);
      break;
      }
    case INTTYPE:{
      jj_consume_token(INTTYPE);
      break;
      }
    case BOOLEAN:{
      jj_consume_token(BOOLEAN);
      break;
      }
    case FALSE:{
      jj_consume_token(FALSE);
      break;
      }
    case TRUE:{
      jj_consume_token(TRUE);
      break;
      }
    case THIS:{
      jj_consume_token(THIS);
      break;
      }
    case NEW:{
      jj_consume_token(NEW);
      break;
      }
    case LBRACE:{
      jj_consume_token(LBRACE);
      break;
      }
    case RBRACE:{
      jj_consume_token(RBRACE);
      break;
      }
    case LCBRACE:{
      jj_consume_token(LCBRACE);
      break;
      }
    case RCBRACE:{
      jj_consume_token(RCBRACE);
      break;
      }
    case LBRACKET:{
      jj_consume_token(LBRACKET);
      break;
      }
    case RBRACKET:{
      jj_consume_token(RBRACKET);
      break;
      }
    case COMMA:{
      jj_consume_token(COMMA);
      break;
      }
    case DOT:{
      jj_consume_token(DOT);
      break;
      }
    case PLUS:{
      jj_consume_token(PLUS);
      break;
      }
    case MINUS:{
      jj_consume_token(MINUS);
      break;
      }
    case MULT:{
      jj_consume_token(MULT);
      break;
      }
    case LESSTHAN:{
      jj_consume_token(LESSTHAN);
      break;
      }
    case AND:{
      jj_consume_token(AND);
      break;
      }
    case BANG:{
      jj_consume_token(BANG);
      break;
      }
    case SEMI:{
      jj_consume_token(SEMI);
      break;
      }
    case EQUAL:{
      jj_consume_token(EQUAL);
      break;
      }
    default:
      jj_la1[1] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
}

  /** Generated Token Manager. */
  public RamParserTokenManager token_source;
  JavaCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private int jj_gen;
  final private int[] jj_la1 = new int[2];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static {
	   jj_la1_init_0();
	   jj_la1_init_1();
	}
	private static void jj_la1_init_0() {
	   jj_la1_0 = new int[] {0xfffffff8,0xfffffff8,};
	}
	private static void jj_la1_init_1() {
	   jj_la1_1 = new int[] {0x3f,0x3f,};
	}

  /** Constructor with InputStream. */
  public RamParser(java.io.InputStream stream) {
	  this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public RamParser(java.io.InputStream stream, String encoding) {
	 try { jj_input_stream = new JavaCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
	 token_source = new RamParserTokenManager(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 2; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
	  ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
	 try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
	 token_source.ReInit(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 2; i++) jj_la1[i] = -1;
  }

  /** Constructor. */
  public RamParser(java.io.Reader stream) {
	 jj_input_stream = new JavaCharStream(stream, 1, 1);
	 token_source = new RamParserTokenManager(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 2; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
	if (jj_input_stream == null) {
	   jj_input_stream = new JavaCharStream(stream, 1, 1);
	} else {
	   jj_input_stream.ReInit(stream, 1, 1);
	}
	if (token_source == null) {
 token_source = new RamParserTokenManager(jj_input_stream);
	}

	 token_source.ReInit(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 2; i++) jj_la1[i] = -1;
  }

  /** Constructor with generated Token Manager. */
  public RamParser(RamParserTokenManager tm) {
	 token_source = tm;
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 2; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(RamParserTokenManager tm) {
	 token_source = tm;
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 2; i++) jj_la1[i] = -1;
  }

  private Token jj_consume_token(int kind) throws ParseException {
	 Token oldToken;
	 if ((oldToken = token).next != null) token = token.next;
	 else token = token.next = token_source.getNextToken();
	 jj_ntk = -1;
	 if (token.kind == kind) {
	   jj_gen++;
	   return token;
	 }
	 token = oldToken;
	 jj_kind = kind;
	 throw generateParseException();
  }


/** Get the next Token. */
  final public Token getNextToken() {
	 if (token.next != null) token = token.next;
	 else token = token.next = token_source.getNextToken();
	 jj_ntk = -1;
	 jj_gen++;
	 return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
	 Token t = token;
	 for (int i = 0; i < index; i++) {
	   if (t.next != null) t = t.next;
	   else t = t.next = token_source.getNextToken();
	 }
	 return t;
  }

  private int jj_ntk_f() {
	 if ((jj_nt=token.next) == null)
	   return (jj_ntk = (token.next=token_source.getNextToken()).kind);
	 else
	   return (jj_ntk = jj_nt.kind);
  }

  private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  private int[] jj_expentry;
  private int jj_kind = -1;

  /** Generate ParseException. */
  public ParseException generateParseException() {
	 jj_expentries.clear();
	 boolean[] la1tokens = new boolean[38];
	 if (jj_kind >= 0) {
	   la1tokens[jj_kind] = true;
	   jj_kind = -1;
	 }
	 for (int i = 0; i < 2; i++) {
	   if (jj_la1[i] == jj_gen) {
		 for (int j = 0; j < 32; j++) {
		   if ((jj_la1_0[i] & (1<<j)) != 0) {
			 la1tokens[j] = true;
		   }
		   if ((jj_la1_1[i] & (1<<j)) != 0) {
			 la1tokens[32+j] = true;
		   }
		 }
	   }
	 }
	 for (int i = 0; i < 38; i++) {
	   if (la1tokens[i]) {
		 jj_expentry = new int[1];
		 jj_expentry[0] = i;
		 jj_expentries.add(jj_expentry);
	   }
	 }
	 int[][] exptokseq = new int[jj_expentries.size()][];
	 for (int i = 0; i < jj_expentries.size(); i++) {
	   exptokseq[i] = jj_expentries.get(i);
	 }
	 return new ParseException(token, exptokseq, tokenImage);
  }

  private boolean trace_enabled;

/** Trace enabled. */
  final public boolean trace_enabled() {
	 return trace_enabled;
  }

  /** Enable tracing. */
  final public void enable_tracing() {
  }

  /** Disable tracing. */
  final public void disable_tracing() {
  }

    }
